import authBgImg from '../../assets/authBgImage.png';

// icons
import GoogleIcon from '@mui/icons-material/Google';
import FacebookOutlinedIcon from '@mui/icons-material/FacebookOutlined';
import AppleIcon from '@mui/icons-material/Apple';
import RemoveRedEyeOutlinedIcon from '@mui/icons-material/RemoveRedEyeOutlined';

import { Link, useNavigate } from 'react-router-dom';
import { auth, googleProvider, facebookProvider } from "../../config/firebase";
import { useState } from "react";
import { createUserWithEmailAndPassword, signInWithPopup } from "firebase/auth";


const SignUp = () => {
  const [registerEmail, setRegisterEmail] = useState("");
  const [registerPassword, setRegisterPassword] = useState("");
  const [registerConfirmPassword, setRegisterConfirmPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false)

  const navigate = useNavigate()

  const register = async () => {
    if (registerPassword !== registerConfirmPassword) {
      console.log("Passwords do not match!");
      return;
    }
    if (registerPassword.length < 6) {
      console.log("Password must be at least 6 characters long");
      return;
    }

    try {
      const user = await createUserWithEmailAndPassword(
        auth,
        registerEmail,
        registerPassword
      );
      if (user) {
        navigate('/')
      }
      console.log(user);
    } catch (error) {
      console.log(error.message);
    }
  };


  const handleGoogleSignIn = async () => {
    try {
      const result = await signInWithPopup(auth, googleProvider);
      console.log("User signed in:", result.user);
      navigate('/')
    } catch (error) {
      console.error("Error signing in:", error);
    }
  };
  const signInWithFacebook = async () => {
    try {
      await signInWithPopup(auth, facebookProvider);
    } catch (err) {
      console.error(err);
    }
  };
  const signInWithApple = async () => {
    try {
      await signInWithPopup(auth, googleProvider);
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div
      className="w-full h-[85vh] flex items-center justify-center bg-cover bg-center"
      style={{ backgroundImage: `url(${authBgImg})` }}
    >
      <div className="bg-white p-8 rounded-xl shadow-lg w-[400px]">
        <h2 className="text-2xl font-semibold text-center mb-4">Create Account</h2>

        {/* Email Input */}
        <div className="mb-3">
          <label className="block text-gray-700">Email address</label>
          <input
            type="email"
            placeholder="Email"
            onChange={(e) => setRegisterEmail(e.target.value)}
            className="w-full border rounded-lg px-3 py-2 mt-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        {/* Password Input */}
        <div className="mb-3">
          <label className="block text-gray-700">Password</label>
          <form>
            {
              showPassword ?
                <input
                  type="password"
                  onChange={(e) => setRegisterPassword(e.target.value)}
                  placeholder="Password"
                  className="w-full border rounded-lg px-3 py-2 mt-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                /> :
                <input
                  type="text"
                  onChange={(e) => setRegisterPassword(e.target.value)}
                  placeholder="Password"
                  className="w-full border rounded-lg px-3 py-2 mt-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
            }
            <button type="button" onClick={() => setShowPassword(!showPassword)}>
              <RemoveRedEyeOutlinedIcon />
            </button>
          </form>
        </div>
        {/* confirm password */}
        <div className="mb-3">
          <label className="block text-gray-700">Confirm Password</label>
          <input
            type="password"
            onChange={(e) => setRegisterConfirmPassword(e.target.value)}
            placeholder="Confirm Password"
            className="w-full border rounded-lg px-3 py-2 mt-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        {/* Sign In Button */}
        <div className='w-full flex justify-start mb-5'>
          <button onClick={register} className="px-5 bg-[#00C29F] text-white py-[13px] rounded-md">
            Sign Up
          </button>
        </div>
        <hr />
        {/* Social Logins */}
        <div className="mt-4 text-center">
          <div className='w-full flex justify-start'>
            <p className="text-gray-600 ">Or sign in with</p>
          </div>
          <div className="flex justify-center gap-4 mt-2">
            <button onClick={handleGoogleSignIn} className='w-[155px] p-[25px] bg-[#F8F8F8] cursor-pointer'>
              <GoogleIcon fontSize='large' />
              Google
            </button>
            <button onClick={signInWithFacebook} className='w-[155px] p-[25px] bg-[#F8F8F8] cursor-pointer'>
              <FacebookOutlinedIcon fontSize='large' />
              Facebook
            </button>
            <div className='w-[155px] p-[25px] bg-[#F8F8F8]'>
              <AppleIcon fontSize='large' />
              Apple
            </div>
          </div>
        </div>

        {/* Navigate to Sign Up */}
        <p className="text-center mt-4">
          I already have an account? <Link to={'/login'} className="text-blue-500">Login</Link>
        </p>
      </div>
    </div>
  );
};

export default SignUp;


